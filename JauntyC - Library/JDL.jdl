/**
 *  Copyright 2017 Salvatore Giampà
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  
 **/

/**
 * Jaunty Definition Language specifics:
 *
 * This file defines the formal JDL specifics through the JDL itself.
 *
 * This file exists for documentation only
 **/
 
language: JDL;
	
lexicon:{
	
	language = /language/$, "'language' string";
	languageName = /[a-zA-Z0-9_]+/$, "language name";
	langId = <languageName>, "language identifier";
	name = /[a-zA-Z0-9\\.\\-\\+\\*]+/$, "A name containing letters digits and some special characters ( .  - + * )";
	lex = /lexicon/$, "'lexicon' string";
	grammar = /grammar/$, "'grammar' string";
	blockOpen = /\{/$, "{";
	blockClose = /\}/$, "}";
	labelSeparator = /\:/$, ":";
	separator = /\\;/$, ";";
	import = /import/$, "import";
	importing = /\"[a-zA-Z0-9\\_\\.\\/\\\\]+\"/$, "file name to import";
	
	//lexer lexicon
	operandSeparator = /\/$, "";
	type = /[a-zA-z][a-zA-Z0-9]*/$, "type name";
	skip = /\!/$, "!";
	typeAssign = /=/$, "=";
	regex = /(?s)(/.*?/\$)/$, "regular expression without space characters";
	description = /\".*\"/$, "description";
	typeSep = /\;/$, ";";
	
	compositeOpen = /\</$, "<";
	compositeClose = /\>/$, ">";
	and = /\&/$, "&";
	or = /\|/$, "|";

	//parser lexicon
	ruleName = /[a-zA-Z][a-zA-Z0-9_]*/$, "rule name";
	productionSymbol = /=/$, "=";
	
	idSep = /\./$;
	terminalPrefix = /\$/$, "terminal prefix";
	ruleProduct = /[a-zA-Z][a-zA-Z0-9_]*/$, "rule product";
	emptyString = /\#/$, "#";
	ruleSeparator = /\;/$, ";";
	productionSeparator = /\|/$, "|";
	
	! commentText = /?s/\*.*?\*/|//[^\n]*/$, "comment";
	nonSkippable = /[^\s]/$, "not ignorable character";
}

grammar:{
	
	language = $language $labelSeparator $languageName $separator compiler;
	compiler = importList lex grammar;
	
	//import
	importList = import $separator importList | #;
	import = $import $importing;
	
	//lexer rules token types
	lex = $lex $labelSeparator $blockOpen lexRuleList $blockClose;
	lexRuleList = lexRule $separator lexRuleListEps;
	lexRuleListEps lexRuleList | #;
	lexRule = skip $type $typeAssign typeValue description;

	//type composing rules
	typeValue = $regex;
	typeValue = compositeType;

	compositeType = $compositeOpen compositeElem compositeTail;
	compositeTail = $and compositeElem compositeTail;
	compositeTail = $or compositeElem compositeTail;
	compositeTail = $compositeClose;

	compositeElem = $type;
	compositeElem = $regex;
	
	lex_rule_eps = lexRule | #;
	skip = $skip | #;
	description = $operandSeparator $description | #;
	
	//parser grammar
	grammar = $grammar $labelSeparator $blockOpen ruleList $blockClose;
	ruleList = rule $separator ruleListEps;
	ruleListEps = ruleList | #;
	
	rule = ruleName $productionSymbol product_list;
	ruleName = $langId $idSep $ruleName;
	ruleName = $ruleName;
	
	product_list = ruleProduct product_list_eps;
	product_list = $emptyString;
	product_list_eps = ruleProduct product_list_eps;
	product_list_eps = $productionSeparator product_list | #;
	
	ruleProduct = terminalPrefix $langId $idSep $ruleProduct;
	ruleProduct = terminalPrefix $ruleProduct;

	terminalPrefix = $terminalPrefix | #;
}


